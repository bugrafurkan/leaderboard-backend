services:
  # PostgreSQL Primary
  postgres-db:
    image: postgres:16.8
    container_name: postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Eklenen optimizasyon konfigürasyonları
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - leaderboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  # PostgreSQL Replica (Read-only queries için)
  postgres-replica:
    image: postgres:16.8
    container_name: postgres-replica
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=postgres
      # Replica yapılandırması için gerekli
      - POSTGRES_MASTER_HOST=postgres-db
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    networks:
      - leaderboard-network
    depends_on:
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cluster - 3 master, 3 replica
  redis-master-1:
    image: redis:latest
    container_name: redis-master-1
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    ports:
      - "6379:6379"
    volumes:
      - redis_master_1_data:/data
    networks:
      - leaderboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-master-2:
    image: redis:latest
    container_name: redis-master-2
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    ports:
      - "6380:6379"
    volumes:
      - redis_master_2_data:/data
    networks:
      - leaderboard-network
    depends_on:
      - redis-master-1
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-master-3:
    image: redis:latest
    container_name: redis-master-3
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    ports:
      - "6381:6379"
    volumes:
      - redis_master_3_data:/data
    networks:
      - leaderboard-network
    depends_on:
      - redis-master-2
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis cluster setup helper
  redis-cluster-init:
    image: redis:latest
    container_name: redis-cluster-init
    networks:
      - leaderboard-network
    depends_on:
      redis-master-1:
        condition: service_healthy
      redis-master-2:
        condition: service_healthy
      redis-master-3:
        condition: service_healthy
    command: >
      sh -c "sleep 10 && echo 'yes' | redis-cli --cluster create 
      redis-master-1:6379 
      redis-master-2:6379 
      redis-master-3:6379 
      --cluster-replicas 0"

  # RabbitMQ Cluster
  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    hostname: rabbitmq1
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE:-SWQOKODSQALRPCLNMEQG}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - leaderboard-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API Server
  leaderboard-backend:
    image: leaderboard-backend:latest
   # container_name: leaderboard-backend
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis-master-1:
        condition: service_healthy
    #ports:
      #- "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-changeme}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1d}
      - DB_HOST=postgres-db
      - DB_READ_HOST=postgres-replica
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=${POSTGRES_PASSWORD:-postgres}
      - DB_NAME=leaderboard_db
      - DB_ROLE=postgres
      - REDIS_CLUSTER_NODES=redis-master-1:6379,redis-master-2:6379,redis-master-3:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
      - SOCKET_SERVER_URL=http://localhost:3000
      - CRON_DISTRIBUTION_TIME=0 23 * * 0
    networks:
      - leaderboard-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  #Frontend
  leaderboard-frontend:
    build:
      context: ../leaderboard-frontend
      dockerfile: Dockerfile
    container_name: leaderboard-frontend
    depends_on:
      - leaderboard-backend
    networks:
      - leaderboard-network
    ports:
      - 8080:80
    restart: unless-stopped


  # Worker Service (async tasks)
  worker:
    image: leaderboard-backend:latest
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "dist/worker.js"]
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis-master-1:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=${POSTGRES_PASSWORD:-postgres}
      - DB_NAME=leaderboard_db
      - DB_ROLE=postgres
      - REDIS_CLUSTER_NODES=redis-master-1:6379,redis-master-2:6379,redis-master-3:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
    networks:
      - leaderboard-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # NGINX as reverse proxy and load balancer
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ../frontend/dist:/usr/share/nginx/html
    depends_on:
      - leaderboard-backend
    networks:
      - leaderboard-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - leaderboard-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    networks:
      - leaderboard-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  leaderboard-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_replica_data:
  redis_master_1_data:
  redis_master_2_data:
  redis_master_3_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
